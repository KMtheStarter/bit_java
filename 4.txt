프로세스: 실행된 상태.
- PPID: 프로세스 부모의 ID
- PID: 프로세스의 ID

데몬 프로세스의 종류
- standalone.d: 웹 바탕. 지속적인 것이 아니라 받으면 연결 끊음. 독립시행형.
- xinet.d: 슈퍼 데몬. 혼자 모든걸 관리함. 소켓으로 항상 연결되어 있음.

스레드 동기화
- 하나 이상의 스레드가 리소스를 공유할 때 문제가 발생. 이를 스레드 동시성 문제라고 함.
- lock pool로 문제를 해결. 해당 풀을 기다리는 자원들은 wait pool에서 기다림.

프로그램이 실행되면 메인스택이 생성되고, start()를 만나면 스레드 전용 스택이 따로 생성됨.

join()을 이용하여 스레드를 대기시킬 수 있음.
join은 해당 프로세스가 종료할 때 까지 다른 프로세스들을 경쟁상태에서 대기하도록 지정하는 메서드.
괄호 안에 밀리초를 사용해 초 단위 대기가 가능하다.

cf> d3.js, hiChart, canvasChart 를 활용하여 그래픽 관련 활동 가능 (js)

동기화를 해주는 방법
- 메서드에 syncronized를 붙인다.
- syncronized 블럭을 만든다.

extends Thread에서는 동기화를 잘 안씀.
동기화가 필요할 땐 implements Runnable 사용

모든 네트워크는 네트워크를 기준으로 식별한다.

루프백 주소? 기본으로 컴퓨터에 내장되어 있는. 자기 자신을 가리키는 호스트 주소.

게이트웨이는 내부망인지 외부망인지 판별하여 통신에 관여함.
ip를 확인하여 내부망이면 mac 주소에 따라서 네트워크를 제공하고,
외부망이면 다른 게이트웨이로 ip에 따라서 네트워크를 보냄.

서버: Host와 IP 가짐.
서비스(데몬 프로세스, 스레드에 기반한 네트워크로 동작): 프로토콜과 포트 필요.
프로토콜에는 Socket, TCP, UDP, HTTP 등이 있다.

TCP: 전송에 대한 응답이 넘어와서 잘 전달되었는지 확인 가능. 보안 상대적으로 높음
UDP: 공유 채널에 참여해 브로드캐스트를 받는 방식. 비연결지향. > datagram, multicasting

소켓을 사용하면 내부적인, 부가적인 프로토콜을 설계할 수 있다.
소켓은 BSD Unix4.3 개정된 소켓을 사용.

polling: 클라이언트가 서버의 데이터가 바뀌는지 지속적으로 확인하는 것.
pushing: 특정한 메시지가 서버에 들어오면 클라이언트에게 알려주는 것.

다수의 사람들이 한 서버의 소켓을 이용하여 통신을 하려면,
서버에서 소켓들을 담는 그릇을 만들어서 제공하면 됨.